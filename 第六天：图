实现一个邻接表表示的有向带权图
每个顶点的所有邻接点和对应的边的权重用字典表示。

对于无权图，可以只将顶点的所有邻接点放入 list 中即可。

图的所有顶点名称及对应的顶点对象用字典表示。

class Vertex:#顶点
    def __init__(self,key):
        self.id = key
        self.connectedTo = {} #邻接点，及相应的权重
        
    def addNeighbor(self, nbr, weight=0):
        self.connectedTo[nbr] = weight
    def __str__(self):
        return str(self.id) + ' connectedTo: '+str([x.id for x in self.connectedTo])
    def getConnections(self): #多有邻接点
        return self.connectedTo.keys()
    def getId(self):
        return self.id
    def getWeight(self,nbr):
        return self.connectedTo[nbr]
    
class Graph: # 邻接表表示的有向带权图
    def __init__(self):
        self.vertList = {} # 所有顶点
        self.numVertices = 0
        
    def addVertex(self, key): #添加顶点
        self.numVertices += 1
        newVertex = Vertex(key)
        self.vertList[key] = newVertex
        return newVertex
    def getVertex(self, n):
        if n in self.vertList:
            return self.vertList[n]
        else:
            return None
    def __contains__(self,n):
        return n in self.vertList
    def addEdge(self,f,t,cost=0): #添加边
        if f not in self.vertList:
            self.addVertex(f)
        if t not in self.vertList:
            self.addVertex(t)
        self.vertList[f].addNeighbor(self.vertList[t], cost)
        
    def getVertices(self):
        return self.vertList.keys()
    def __iter__(self):
        return iter(self.vertList.values())
if __name=="__main__":    
    g = Graph()
    for i in range(6):
        g.addVertex(i)
    print(g.getVertex(3))
    print(g.vertList)
    print(3 in g)
    g.addEdge(0,1,5)
    g.addEdge(0,5,2)
    g.addEdge(1,2,4)
    g.addEdge(2,3,9)
    g.addEdge(3,4,7)
    g.addEdge(3,5,3)
    g.addEdge(4,0,1)
    g.addEdge(5,4,8)
    g.addEdge(5,2,1)
    print(g.getVertices())
    for v in g:
        for w in v.getConnections():
            print('(%s,%s)'%(v.getId(), w.getId()))
            
  ###########################################################################################################
  图的遍历
遍历图最常用的有两种方式，就是你常听到的 BFS 和 DFS.

BFS: Breadth First Search，广度优先搜索
DFS: Depdth First Search，深度优先搜索
BFS
BFS 类似于树的层序遍历，从第一个节点开始，先访问离 A 最近的点，接着访问次近的点。

from collections import deque

GRAPH = {  # 邻接表表示的无向无权图
    'A': ['B', 'F'],
    'B': ['C', 'I', 'G'],
    'C': ['B', 'I', 'D'],
    'D': ['C', 'I', 'G', 'H', 'E'],
    'E': ['D', 'H', 'F'],
    'F': ['A', 'G', 'E'],
    'G': ['B', 'F', 'H', 'D'],
    'H': ['G', 'D', 'E'],
    'I': ['B', 'C', 'D'],
}


class Queue(object): # 队列辅助
    def __init__(self):
        self._deque = deque()

    def push(self, value):
        return self._deque.append(value)

    def pop(self):
        return self._deque.popleft()

    def __len__(self):
        return len(self._deque)


def bfs(graph, start):
    search_queue = Queue()
    search_queue.push(start)# 起点先入队
    searched = set() # 已经访问过的结点
    while search_queue:   # 队列不为空就继续
        cur_node = search_queue.pop() # 出队
        if cur_node not in searched: # 若是未访问的结点
            yield cur_node # 读出
            searched.add(cur_node) # 添加到记录中
            for node in graph[cur_node]: # 所有邻接点
                search_queue.push(node)# 起点的所有邻接点入队

###############################################################################################################
岛屿个数：
     class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
     
        if grid is None: return None
        if grid == []: return 0
        # 当数组不为空时，计算行数和列数
        self.n = len(grid)
        self.m = len(grid[0])
        x = 0
        for i in range(self.n):
            for j in range(self.m):
                if grid[i][j] == "1":
                    x += 1
                    grid = self.change(grid,i,j)
        return x
     
    def change(self,grid,i,j):
        grid[i][j] = 0
        if i > 0 and grid[i-1][j] == "1":
            # 置当前点上边的点为0
            grid = self.change(grid,i-1,j)
        if i < self.n-1 and grid[i+1][j] == "1":
            # 置当前点下边的点为0
            grid = self.change(grid,i+1,j)
             
        if j < self.m-1 and grid[i][j+1] == "1":
            # 置当前点右方的点为0
            grid = self.change(grid,i,j+1)
        if j > 0 and grid[i][j-1] == "1":
            # 置当前点左方的点为0
            grid = self.change(grid,i,j-1)
        return grid
